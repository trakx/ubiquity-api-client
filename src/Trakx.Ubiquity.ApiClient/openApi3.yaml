---
openapi: 3.0.0
info:
  version: 2.0.0
  title: Ubiquity REST API
  description: |
    Ubiquity provides a RESTful and uniform way to access blockchain resources,
    with a rich and reusable model across multiple cryptocurrencies.

    [Documentation](https://app.blockdaemon.com/docs/ubiquity)

    ### Protocols
    #### Mainnet
    The following protocols are currently supported:
    * bitcoin
    * ethereum
    * polkadot
    * xrp
    * algorand
    * stellar
    * dogecoin
    * oasis
    * near
    * terra
    * litecoin
    * bitcoincash
    * tezos
    * solana

    #### Testnet
    * bitcoin/testnet
    * ethereum/ropsten
    * dogecoin/testnet
    * litecoin/testnet
    * bitcoincash/testnet

    #### Native
    Ubiquity provides native access to all Blockchain nodes it supports.
    To access native functionality, use the protocol without the v2 prefix
    * bitcoin/(mainnet | testnet) - [RPC Documentation](https://developer.bitcoin.org/reference/rpc/)
    * ethereum/(mainnet | ropsten) - [RPC Documentation](https://ethereum.org/en/developers/docs/apis/json-rpc/)
    * polkadot/mainnet - [Sidecar API Documentation](https://paritytech.github.io/substrate-api-sidecar/dist/)
    * polkadot/mainnet/http-rpc - [Polkadot RPC Documentation](https://polkadot.js.org/docs/substrate/rpc/)
    * algorand/mainnet - [Algod API Documentation](https://developer.algorand.org/docs/reference/rest-apis/algod/)
    * stellar/mainnet - [Stellar Horizon API Documentation](https://developers.stellar.org/api)
    * dogecoin/(mainnet | testnet) - [Dogecoin API Documentaion](https://developer.bitcoin.org/reference/rpc/)
    * oasis/mainnet - [Oasis Rosetta Gateway Documentation](https://www.rosetta-api.org/docs/api_identifiers.html#network-identifier)
    * near/mainnet - [NEAR RPC Documentation](https://docs.near.org/docs/api/rpc)
    * terra/mainnet - [Terra RPC Documentation](https://docs.terra.money/docs/develop/how-to/endpoints.html)
    * litecoin/mainnet - [Litecoin RPC Documentation](https://litecoin.info/index.php/Litecoin_API)
    * bitcoincash/mainnet - [Bitcoin Cash RPC Documentation](https://docs.bitcoincashnode.org/doc/json-rpc/)
    * tezos/mainnet - [Tezos RPC Documentation](https://tezos.gitlab.io/developer/rpc.html)
    * solana/mainnet - [Solana RPC Documentation](https://docs.solana.com/developing/clients/jsonrpc-api)

    A full URL example: https://ubiquity.api.blockdaemon.com/v1/bitcoin/mainnet

    ##### Pagination
    Certain resources contain a lot of data, more than what's practical
    to return for a single request.
    With the help of pagination, the data is split across multiple responses.
    Each response returns a subset of the items requested, and a continuation token.

    To get the next batch of items, copy the returned continuation token
    to the continuation query parameter and repeat the request with the new URL.
    In case no continuation token is returned, there is no more data available.
  contact:
    name: Blockdaemon
    email: support@blockdaemon.com
    url: https://blockdaemon.com
  x-logo:
    url: logo.png
servers:
- url: https://ubiquity.api.blockdaemon.com
  description: Production server
- url: https://stg.ubiquity.api.blockdaemon.com
  description: Staging server
tags:
- name: Protocols
- name: Accounts
- name: Blocks
- name: Block Identifiers
- name: Transactions
- name: Sync
- name: NFT
security:
- bearerAuth: []
paths:
  "/v1/":
    get:
      summary: Protocols overview
      operationId: GetProtocolsList
      tags:
      - Protocols
      description: 'Provides a list of supported protocols and networks.

        '
      responses:
        '200':
          description: Protocols overview
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/protocols_overview"
              example:
                protocols:
                - handle: algorand
                  network: mainnet
                - handle: bitcoin
                  network: mainnet
                - handle: bitcoin
                  network: testnet
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v1/{protocol}/{network}/":
    get:
      summary: Protocol Info
      operationId: GetProtocolEndpoints
      tags:
      - Protocols
      description: 'Provides information about supported endpoints and generic protocol
        information.

        '
      parameters:
      - "$ref": "#/components/parameters/protocol-v1"
      - "$ref": "#/components/parameters/network"
      responses:
        '200':
          description: Protocol overview
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/protocol_detail"
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v1/{protocol}/{network}/tx/estimate_fee":
    get:
      summary: Get fee estimate
      description: |
        Get a fee estimation in decimals from the ubiquity fee estimation service.
        Currently supported for Bitcoin and Ethereum. Endpoint will return 3 fee estimations
        fast, medium and slow
      operationId: FeeEstimate
      tags:
      - Transactions
      parameters:
      - "$ref": "#/components/parameters/protocol-estimate-fee"
      - "$ref": "#/components/parameters/network"
      responses:
        '200':
          description: Protocols overview
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/fee_estimate"
              example:
                most_recent_block: 714408
                estimated_fees:
                  fast": 5
                  medium: 3
                  slow: 2
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v1/{protocol}/{network}/account/{address}":
    get:
      summary: Balances Of Address
      operationId: GetListOfBalancesByAddress
      description: 'Returns the account balances for all supported currencies.

        '
      tags:
      - Accounts
      parameters:
      - "$ref": "#/components/parameters/protocol-account-address"
      - "$ref": "#/components/parameters/network"
      - "$ref": "#/components/parameters/address"
      responses:
        '200':
          description: Balances
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/balances_map-v1"
        '400':
          description: Bad request
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v1/{protocol}/{network}/accounts":
    post:
      summary: Balances Of Addresses
      operationId: GetListOfBalancesByAddresses
      description: 'Returns the balances of accounts for all supported currencies.

        '
      tags:
      - Accounts
      parameters:
      - "$ref": "#/components/parameters/protocol-account-address"
      - "$ref": "#/components/parameters/network"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/accounts_obj"
      responses:
        '200':
          description: Balances
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/accounts_balances_map-v1"
        '400':
          description: Bad request
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v1/{protocol}/{network}/account/{address}/report":
    get:
      summary: A financial report for an address between a time period. Default timescale
        is within the last 30 days
      operationId: GetReportByAddress
      description: 'Returns account activity

        '
      tags:
      - Accounts
      parameters:
      - "$ref": "#/components/parameters/protocol-report"
      - "$ref": "#/components/parameters/network"
      - "$ref": "#/components/parameters/address"
      - name: from
        in: query
        description: Unix Timestamp from where to start
        schema:
          type: integer
        example: 961846434
      - name: to
        in: query
        description: Unix Timestamp from where to end
        schema:
          type: integer
        example: 1119612834
      - name: limit
        in: query
        required: false
        description: |
          Max number of items to return in a response.
          Defaults to 50k and is capped at 100k.
        schema:
          type: integer
        example: 1000
      - name: continuation
        in: query
        required: false
        description: Continuation token from earlier response
        schema:
          type: string
        example: xyz
      responses:
        '200':
          description: Account Activity
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/report"
            text/csv:
              schema:
                type: string
                example: |
                  Protocol,PublicAddress,Currency,EventID,Block,BlockTimestamp,BlockTime,Hash,Action,Value,SenderAddress,TransactionFee,SenderReward,RecipientReward,Close,CloseAmount,CloseReward
                  Algorand,GXL2EQ6JV54MTMP2IXOTF5CJLS7GAWMRDZMOY7JZAPO72AQRDDYGD6OX3E,ALGO,RNEYUT3MRYGT5ENSLIC7LGJCJMW6BXNS6SAW7A25DTYRW4TFJ5JA,8986217,1599745403,2020-09-10 13:43:23 +0000 UTC,RNEYUT3MRYGT5ENSLIC7LGJCJMW6BXNS6SAW7A25DTYRW4TFJ5JA,pay,1,T3BYUTYZCWV7UVK7IFYPC2UKH5VNBGVP4PUKSUBF5F6GQ244Y4I2XUWCQM,0.001,0.000003,0,,0,0
        '400':
          description: Bad request
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '413':
          description: Too Many Transactions
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: unsupported
                code: 16390
                title: Unsupported functionality
                status: 413
                detail: current query size is too large for this account. try reducing
                  query range (from, to)
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v1/{protocol}/{network}/account/{address}/utxo":
    get:
      summary: Endpoint for getting transaction inputs and outputs for a given account.
      operationId: GetUTXOByAccount
      description: 'Returns transactions inputs and outputs following the BTC''s UTXO
        model definition.

        '
      tags:
      - Accounts
      parameters:
      - "$ref": "#/components/parameters/protocol-utxo"
      - "$ref": "#/components/parameters/network"
      - "$ref": "#/components/parameters/address"
      - name: spent
        in: query
        description: Whether the transaction output was spent or not
        schema:
          type: boolean
        example: true
      - name: from
        in: query
        description: Unix Timestamp from where to start
        schema:
          type: integer
        example: 961846434
      - name: to
        in: query
        description: Unix Timestamp from where to end
        schema:
          type: integer
        example: 1119612834
      - name: limit
        in: query
        required: false
        description: |
          Max number of items to return in a response.
          Defaults to 50k and is capped at 100k.
        schema:
          type: integer
        example: 1000
      - name: continuation
        in: query
        required: false
        description: Continuation token from earlier response
        schema:
          type: string
        example: xyz
      responses:
        '200':
          description: Transaction outputs filtered by the given parameters
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/tx_outputs"
            text/csv:
              schema:
                type: string
                example: |
                  Protocol,PublicAddress,Currency,EventID,Block,BlockTimestamp,BlockTime,Hash,Action,Value,SenderAddress,TransactionFee,SenderReward,RecipientReward,Close,CloseAmount,CloseReward
                  Algorand,GXL2EQ6JV54MTMP2IXOTF5CJLS7GAWMRDZMOY7JZAPO72AQRDDYGD6OX3E,ALGO,RNEYUT3MRYGT5ENSLIC7LGJCJMW6BXNS6SAW7A25DTYRW4TFJ5JA,8986217,1599745403,2020-09-10 13:43:23 +0000 UTC,RNEYUT3MRYGT5ENSLIC7LGJCJMW6BXNS6SAW7A25DTYRW4TFJ5JA,pay,1,T3BYUTYZCWV7UVK7IFYPC2UKH5VNBGVP4PUKSUBF5F6GQ244Y4I2XUWCQM,0.001,0.000003,0,,0,0
        '400':
          description: Bad request
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '413':
          description: Too Many Transactions
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: unsupported
                code: 16390
                title: Unsupported functionality
                status: 413
                detail: current query size is too large for this account. try reducing
                  query range (from, to)
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v1/{protocol}/{network}/tx/{id}/confirmations":
    get:
      summary: Transaction confirmations By Hash
      operationId: GetTxConfirmations
      tags:
      - Transactions
      parameters:
      - "$ref": "#/components/parameters/protocol-tx-confirmation"
      - "$ref": "#/components/parameters/network"
      - "$ref": "#/components/parameters/tx-hash"
      responses:
        '200':
          description: Transaction confirmations
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/tx_confirmation"
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: bad-request
                code: 16385
                title: Invalid Identifier
                status: 400
                detail: The requested identifier is invalid.
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: not-found
                code: 16388
                title: Not Found
                status: 404
                detail: The requested resource has not been found
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v1/{protocol}/{network}/account/{address}/txs":
    get:
      summary: Transactions Of Address
      description: |
        Gets transactions that an address was involved with, from newest to oldest.
        This call uses pagination.
      operationId: GetTxsByAddress
      tags:
      - Accounts
      parameters:
      - "$ref": "#/components/parameters/protocol-account-txs"
      - "$ref": "#/components/parameters/network"
      - "$ref": "#/components/parameters/address"
      - "$ref": "#/components/parameters/order"
      - "$ref": "#/components/parameters/continuation"
      - "$ref": "#/components/parameters/limit"
      - "$ref": "#/components/parameters/assets"
      responses:
        '200':
          description: Transactions
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/tx_page-v1"
          links:
            Continuation:
              operationId: GetTxsByAddress
              parameters:
                continuation: "$response.body#/Meta"
        '400':
          description: Invalid address
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: bad-request
                code: 16384
                title: Invalid Address
                status: 400
                detail: The requested address is invalid on this protocol
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '403':
          description: Invalid continuation
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: forbidden
                code: 16389
                title: Invalid Continuation
                status: 403
                detail: The used continuation token is invalid.
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v1/{protocol}/{network}/tx/{id}":
    get:
      summary: Transaction By Hash
      operationId: GetTx
      tags:
      - Transactions
      parameters:
      - "$ref": "#/components/parameters/protocol-tx-id"
      - "$ref": "#/components/parameters/network"
      - name: id
        in: path
        required: true
        description: Transaction ID/Hash
        schema:
          type: string
        example: '0xF00Fa860473130C1df10707223E66Cb4B839B165'
      responses:
        '200':
          description: Transaction
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/tx"
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: bad-request
                code: 16385
                title: Invalid Identifier
                status: 400
                detail: The requested identifier is invalid.
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: not-found
                code: 16388
                title: Not Found
                status: 404
                detail: The requested resource has not been found
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v1/{protocol}/{network}/tx/{id}/{index}":
    get:
      summary: Transaction output by hash and index
      operationId: GetTxByHashAndIndex
      tags:
      - Transactions
      parameters:
      - "$ref": "#/components/parameters/protocol-tx"
      - "$ref": "#/components/parameters/network"
      - name: id
        in: path
        required: true
        description: Transaction ID/Hash
        schema:
          type: string
        example: '0xF00Fa860473130C1df10707223E66Cb4B839B165'
      - name: index
        in: path
        required: true
        description: Transaction output index
        schema:
          type: integer
        example: 0
      responses:
        '200':
          description: Transaction output
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/tx_output"
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: bad-request
                code: 16385
                title: Invalid Identifier
                status: 400
                detail: The requested identifier is invalid.
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: not-found
                code: 16388
                title: Not Found
                status: 404
                detail: The requested resource has not been found
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v1/{protocol}/{network}/txs":
    get:
      summary: All Transactions
      description: Get all transactions on the protocol, starting with the lastest
        one. Each call returns a slice of the entire list. Use the returned continuation
        token to get the next part.
      operationId: GetTxs
      tags:
      - Transactions
      parameters:
      - "$ref": "#/components/parameters/protocol-txs"
      - "$ref": "#/components/parameters/network"
      - "$ref": "#/components/parameters/order"
      - "$ref": "#/components/parameters/continuation"
      - "$ref": "#/components/parameters/limit"
      - "$ref": "#/components/parameters/assets"
      responses:
        '200':
          description: Transactions
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/tx_page"
          links:
            Continuation:
              operationId: GetTxs
              parameters:
                continuation: "$response.body#/continuation"
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '403':
          description: Invalid continuation
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: forbidden
                code: 16389
                title: Invalid Continuation
                status: 403
                detail: The used continuation token is invalid.
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v1/{protocol}/{network}/tx/send":
    post:
      summary: Submit a signed transaction
      description: |
        Submit a signed transaction to the network.

        **Note**: A successful transaction may still be rejected on chain or not processed due to a too low fee.
        You can monitor successful transactions through Ubiquity websockets.
      operationId: V1TxSend
      tags:
      - Transactions
      parameters:
      - "$ref": "#/components/parameters/tx-send-v1"
      - "$ref": "#/components/parameters/network"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/signed_tx"
      responses:
        '200':
          description: A submitted Transaction ID
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/tx_receipt"
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: bad-request
                code: 16396
                title: Bad Request
                status: 400
                detail: 'failed to send transaction: json-rpc error #-27: Transaction
                  already in block chain'
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v1/{protocol}/{network}/block/{block_identifier}":
    get:
      summary: Block By Number or Hash
      description: Get a block and all its transactions by the block number or hash
      operationId: GetBlock
      tags:
      - Blocks
      parameters:
      - "$ref": "#/components/parameters/protocol-v1"
      - "$ref": "#/components/parameters/network"
      - "$ref": "#/components/parameters/block_identifier"
      responses:
        '200':
          description: Block
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/block"
        '400':
          description: Invalid Block Identifier
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: bad-request
                code: 16386
                title: Invalid Block Identifier
                status: 400
                detail: The requested block number is not a valid identifier
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: not-found
                code: 16388
                title: Not Found
                status: 404
                detail: The requested resource has not been found
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v1/{protocol}/{network}/block_identifier/{block_identifier}":
    get:
      summary: Block Identifier By Hash
      description: Get minimal block identifier by block hash
      operationId: GetBlockIdentifierById
      tags:
      - Block Identifiers
      parameters:
      - "$ref": "#/components/parameters/protocol-block-identifier-id"
      - "$ref": "#/components/parameters/network"
      - "$ref": "#/components/parameters/block_identifier"
      responses:
        '200':
          description: Block
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/block_identifier"
        '400':
          description: Invalid Block hash
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: bad-request
                code: 16386
                title: Invalid Block hash
                status: 400
                detail: The requested block hash is not a valid hash
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: not-found
                code: 16388
                title: Not Found
                status: 404
                detail: The requested resource has not been found
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v1/{protocol}/{network}/block_identifiers":
    get:
      summary: Block Identifiers
      description: Get minimal block identifiers
      operationId: GetBlockIdentifiers
      tags:
      - Block Identifiers
      parameters:
      - "$ref": "#/components/parameters/protocol-block-headers"
      - "$ref": "#/components/parameters/network"
      - "$ref": "#/components/parameters/continuation"
      - "$ref": "#/components/parameters/order"
      - "$ref": "#/components/parameters/limit"
      responses:
        '200':
          description: Block headers
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/block_identifiers"
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v1/{protocol}/{network}/sync/block_number":
    get:
      summary: Get current block number
      operationId: CurrentBlockNumber
      tags:
      - Sync
      parameters:
      - "$ref": "#/components/parameters/protocol-v1"
      - "$ref": "#/components/parameters/network"
      responses:
        '200':
          description: Current block number
          content:
            application/json:
              schema:
                format: int64
                type: integer
              example: 32656659
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v1/{protocol}/{network}/sync/block_id":
    get:
      summary: Get current block ID
      operationId: CurrentBlockID
      tags:
      - Sync
      parameters:
      - "$ref": "#/components/parameters/protocol-v1"
      - "$ref": "#/components/parameters/network"
      responses:
        '200':
          description: Current block ID
          content:
            application/json:
              schema:
                type: string
              example: 3ea7cfb439e0baa4d91525b66b1f7b4e79ac0302a054a83d12f4e2ee7c933c8f
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v1/nft/{protocol}/{network}/asset/{id}":
    get:
      tags:
      - NFT
      description: |-
        Returns detailed information about an NFT asset by a given unique asset ID or
         by a given contact address and token ID.
      operationId: GetAsset
      parameters:
      - name: protocol
        in: path
        description: 'Protocol handle, example: ethereum'
        required: true
        schema:
          type: string
      - name: network
        in: path
        description: 'Which network to target, example: mainnet'
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: Gets the Asset with matching `id`
        required: true
        schema:
          type: string
      - name: contract_address
        in: query
        description: Used in conjunction with `token_id` to get an Asset
        schema:
          type: string
      - name: token_id
        in: query
        description: Used in conjunction with `contract_address` to get an Asset
        schema:
          type: string
      - name: show_wallets
        in: query
        description: Shows associated wallets when set to true
        schema:
          type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GetAssetResponse"
  "/v1/nft/{protocol}/{network}/assets":
    get:
      tags:
      - NFT
      description: Returns NFT assets by a given collection, contract, or wallet.
      operationId: ListAssets
      parameters:
      - name: protocol
        in: path
        description: 'Protocol handle, example: ethereum'
        required: true
        schema:
          type: string
      - name: network
        in: path
        description: 'Which network to target, example: mainnet'
        required: true
        schema:
          type: string
      - name: wallet_address
        in: query
        description: Lists Assets by `wallet_address`
        schema:
          type: string
      - name: contract_address
        in: query
        description: Lists Assets by `contract_address`
        schema:
          type: string
      - name: token_id
        in: query
        description: Filters results by `token_id` requires `contract_address`
        schema:
          type: string
      - name: collection_name
        in: query
        description: Lists Assets by `collection_name`
        schema:
          type: string
      - name: sort_by
        in: query
        description: 'One of: name, token_id, mint_date'
        schema:
          type: string
      - name: order
        in: query
        description: 'One of: asc, desc'
        schema:
          type: integer
          format: enum
      - name: page_size
        in: query
        description: Limit results number of results by `page_size` where maximum
          is 50
        schema:
          type: integer
          format: uint32
      - name: page_token
        in: query
        description: Base64 encoded cursor used to retrieve next page of results
        schema:
          type: string
      - name: attributes
        in: query
        description: Filters results by attribute pairs in the format key:value
        schema:
          type: array
          items:
            type: string
      - name: token_type
        in: query
        description: 'Filters by `token_type`, one of: ERC721, ERC1155, CRYPTOPUNKS
          or ERC20'
        schema:
          type: array
          items:
            type: integer
            format: enum
      - name: show_wallets
        in: query
        description: Shows associated wallets when set to true
        schema:
          type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListAssetsResponse"
  "/v1/nft/{protocol}/{network}/collection/{id}":
    get:
      tags:
      - NFT
      description: Returns detailed information about an NFT collection by a given
        unique collection ID.
      operationId: GetCollection
      parameters:
      - name: protocol
        in: path
        description: 'Protocol handle, example: ethereum'
        required: true
        schema:
          type: string
      - name: network
        in: path
        description: 'Which network to target, example: mainnet'
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: Gets the Collection with matching `id`
        required: true
        schema:
          type: string
      - name: contractAddress
        in: query
        description: Gets the Collection with matching `contract_address`
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GetCollectionResponse"
  "/v1/nft/{protocol}/{network}/collections":
    get:
      tags:
      - NFT
      description: |-
        Returns a list of all Collections in the network, which can be filtered by a given
         collection name, contract address or token type.
      operationId: ListCollections
      parameters:
      - name: protocol
        in: path
        description: 'Protocol handle, example: ethereum'
        required: true
        schema:
          type: string
      - name: network
        in: path
        description: 'Which network to target, example: mainnet'
        required: true
        schema:
          type: string
      - name: contractAddress
        in: query
        description: Lists collections with matching `contract_address`, repeatable
          field
        schema:
          type: array
          items:
            type: string
      - name: collectionName
        in: query
        description: Lists Collections matching provided `collection_name`, repeatable
          field
        schema:
          type: array
          items:
            type: string
      - name: sort_by
        in: query
        description: 'Sort by one of: name'
        schema:
          type: string
      - name: order
        in: query
        description: 'One of: asc, desc'
        schema:
          type: integer
          format: enum
      - name: page_size
        in: query
        description: Limit results number of results by `page_size` where maximum
          is 500
        schema:
          type: integer
          format: uint32
      - name: page_token
        in: query
        description: Base64 encoded cursor used to retrieve next page of results
        schema:
          type: string
      - name: token_type
        in: query
        description: 'Filters by `token_type`, one of: ERC721, ERC1155, CRYPTOPUNKS
          or ERC20, repeatable field'
        schema:
          type: array
          items:
            type: integer
            format: enum
      - name: verified
        in: query
        description: Only verified collections will be returned when set to true
        schema:
          type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListCollectionResponse"
  "/v1/nft/{protocol}/{network}/collections/search":
    get:
      tags:
      - NFT
      description: |-
        Returns NFT collections with names matching a given search string.
         The response includes top 50 most relevant results, sorted in descending order.
      operationId: SearchCollections
      parameters:
      - name: protocol
        in: path
        description: 'Protocol handle, example: ethereum'
        required: true
        schema:
          type: string
      - name: network
        in: path
        description: 'Which network to target, example: mainnet'
        required: true
        schema:
          type: string
      - name: name
        in: query
        description: Free text search on collection name, returning closest matching
          results
        schema:
          type: string
      - name: verified
        in: query
        description: Mapped to URL query parameter 'verified'
        schema:
          type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SearchCollectionResponse"
  "/v1/nft/{protocol}/{network}/event/{id}":
    get:
      tags:
      - NFT
      description: Returns detailed information about an NFT event by a given event
        ID.
      operationId: GetEvent
      parameters:
      - name: protocol
        in: path
        description: 'Protocol handle, example: ethereum'
        required: true
        schema:
          type: string
      - name: network
        in: path
        description: 'Which network to target, example: mainnet'
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: Gets the Event with matching `id`
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/GetEventResponse"
  "/v1/nft/{protocol}/{network}/events":
    get:
      tags:
      - NFT
      description: Returns NFT events by a given contract or wallet.
      operationId: ListEvents
      parameters:
      - name: protocol
        in: path
        description: 'Protocol handle, example: ethereum'
        required: true
        schema:
          type: string
      - name: network
        in: path
        description: 'Which network to target, example: mainnet'
        required: true
        schema:
          type: string
      - name: contract_address
        in: query
        description: Lists Events by `contract_address`
        schema:
          type: string
      - name: wallet_address
        in: query
        description: Lists Events by `wallet_address`
        schema:
          type: string
      - name: token_id
        in: query
        description: Filters Events by `token_id`, requires `contract_address`
        schema:
          type: string
      - name: event_type
        in: query
        description: 'Filters Events by `event_type`, one of: mint, transfer, sale'
        schema:
          type: string
      - name: sort_by
        in: query
        description: 'Sort by one of: timestamp'
        schema:
          type: string
      - name: order
        in: query
        description: 'One of: asc, desc'
        schema:
          type: integer
          format: enum
      - name: page_size
        in: query
        description: Limit results number of results by `page_size` where maximum
          is 500
        schema:
          type: integer
          format: uint32
      - name: page_token
        in: query
        description: Base64 encoded cursor used to retrieve next page of results
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ListEventResponse"
  "/v2/":
    get:
      summary: Protocols overview
      operationId: GetProtocols
      tags:
      - Protocols
      description: 'Provides a list of supported protocols and networks.

        '
      responses:
        '200':
          description: Protocols overview
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/protocols_overview"
              example:
                protocols:
                - handle: algorand
                  network: mainnet
                - handle: bitcoin
                  network: mainnet
                - handle: bitcoin
                  network: testnet
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v2/{protocol}/{network}":
    get:
      summary: Protocol Info
      operationId: GetProtocol
      tags:
      - Protocols
      description: 'Provides information about supported endpoints and generic protocol
        information.

        '
      parameters:
      - "$ref": "#/components/parameters/protocol-v2"
      - "$ref": "#/components/parameters/network"
      responses:
        '200':
          description: Protocol overview
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/protocol_detail"
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v2/{protocol}/{network}/account/{address}":
    get:
      summary: Balances Of Address
      operationId: GetBalancesByAddress
      description: 'Returns the account balances for all supported currencies.

        '
      tags:
      - Accounts
      parameters:
      - "$ref": "#/components/parameters/protocol-v2"
      - "$ref": "#/components/parameters/network"
      - "$ref": "#/components/parameters/address"
      - "$ref": "#/components/parameters/assets"
      responses:
        '200':
          description: Balances
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/balances_map"
        '400':
          description: Bad request
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v2/{protocol}/{network}/account/{address}/txs":
    get:
      summary: Transactions Of Address
      description: |
        Gets transactions that an address was involved with, from newest to oldest.
        This call uses pagination.
      operationId: v2GetTxsByAddress
      tags:
      - Accounts
      parameters:
      - "$ref": "#/components/parameters/protocol"
      - "$ref": "#/components/parameters/network"
      - "$ref": "#/components/parameters/address"
      - "$ref": "#/components/parameters/order"
      - "$ref": "#/components/parameters/continuation"
      - "$ref": "#/components/parameters/limit"
      - "$ref": "#/components/parameters/assets"
      responses:
        '200':
          description: Transactions
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/tx_page"
          links:
            Continuation:
              operationId: GetTxsByAddress
              parameters:
                continuation: "$response.body#/continuation"
        '400':
          description: Invalid address
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: bad-request
                code: 16384
                title: Invalid Address
                status: 400
                detail: The requested address is invalid on this protocol
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '403':
          description: Invalid continuation
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: forbidden
                code: 16389
                title: Invalid Continuation
                status: 403
                detail: The used continuation token is invalid.
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v2/{protocol}/{network}/account/{address}/report":
    get:
      summary: A financial report for an address between a time period. Default timescale
        is within the last 30 days
      operationId: v2GetReportByAddress
      description: 'Returns account activity

        '
      tags:
      - Accounts
      parameters:
      - "$ref": "#/components/parameters/protocol-report-v2"
      - "$ref": "#/components/parameters/network"
      - "$ref": "#/components/parameters/address"
      - name: from
        in: query
        description: Unix Timestamp from where to start
        schema:
          type: integer
        example: 961846434
      - name: to
        in: query
        description: Unix Timestamp from where to end
        schema:
          type: integer
        example: 1119612834
      - name: limit
        in: query
        required: false
        description: |
          Max number of items to return in a response.
          Defaults to 50k and is capped at 100k.
        schema:
          type: integer
        example: 1000
      - name: continuation
        in: query
        required: false
        description: Continuation token from earlier response
        schema:
          type: string
        example: xyz
      responses:
        '200':
          description: Account Activity
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/report"
            text/csv:
              schema:
                type: string
                example: |
                  Protocol,PublicAddress,Currency,EventID,Block,BlockTimestamp,BlockTime,Hash,Action,Value,SenderAddress,TransactionFee,SenderReward,RecipientReward,Close,CloseAmount,CloseReward
                  Algorand,GXL2EQ6JV54MTMP2IXOTF5CJLS7GAWMRDZMOY7JZAPO72AQRDDYGD6OX3E,ALGO,RNEYUT3MRYGT5ENSLIC7LGJCJMW6BXNS6SAW7A25DTYRW4TFJ5JA,8986217,1599745403,2020-09-10 13:43:23 +0000 UTC,RNEYUT3MRYGT5ENSLIC7LGJCJMW6BXNS6SAW7A25DTYRW4TFJ5JA,pay,1,T3BYUTYZCWV7UVK7IFYPC2UKH5VNBGVP4PUKSUBF5F6GQ244Y4I2XUWCQM,0.001,0.000003,0,,0,0
        '400':
          description: Bad request
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '413':
          description: Too Many Transactions
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: unsupported
                code: 16390
                title: Unsupported functionality
                status: 413
                detail: current query size is too large for this account. try reducing
                  query range (from, to)
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v2/{protocol}/{network}/accounts":
    post:
      summary: Balances Of Addresses
      operationId: GetBalancesByAddresses
      description: 'Returns the balances of accounts for all supported currencies.

        '
      tags:
      - Accounts
      parameters:
      - "$ref": "#/components/parameters/v2-protocol-accounts"
      - "$ref": "#/components/parameters/network"
      - "$ref": "#/components/parameters/assets"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/accounts_obj"
      responses:
        '200':
          description: Balances
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/accounts_balances_map"
        '400':
          description: Bad request
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v2/{protocol}/{network}/txs":
    get:
      summary: All Transactions
      description: Get all transactions on the protocol, starting with the lastest
        one. Each call returns a slice of the entire list. Use the returned continuation
        token to get the next part.
      operationId: V2GetTxs
      tags:
      - Transactions
      parameters:
      - "$ref": "#/components/parameters/v2-protocol-txs"
      - "$ref": "#/components/parameters/network"
      - "$ref": "#/components/parameters/order"
      - "$ref": "#/components/parameters/continuation"
      - "$ref": "#/components/parameters/limit"
      - "$ref": "#/components/parameters/assets"
      responses:
        '200':
          description: Transactions
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/tx_page"
          links:
            Continuation:
              operationId: GetTxs
              parameters:
                continuation: "$response.body#/continuation"
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '403':
          description: Invalid continuation
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: forbidden
                code: 16389
                title: Invalid Continuation
                status: 403
                detail: The used continuation token is invalid.
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v2/{protocol}/{network}/block/{key}":
    get:
      summary: Block By Number/Hash
      description: Get a block and all its transactions by the block number or hash
      operationId: V2GetBlock
      tags:
      - Blocks
      parameters:
      - "$ref": "#/components/parameters/protocol-v2"
      - "$ref": "#/components/parameters/network"
      - "$ref": "#/components/parameters/key"
      responses:
        '200':
          description: Block
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/block"
        '400':
          description: Invalid Block Number
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: bad-request
                code: 16386
                title: Invalid Block Number
                status: 400
                detail: The requested block number is not a valid number
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: not-found
                code: 16388
                title: Not Found
                status: 404
                detail: The requested resource has not been found
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v2/{protocol}/{network}/block_identifiers":
    get:
      summary: Block Identifiers
      description: Get minimal block identifiers
      operationId: V2GetBlockIdentifiers
      tags:
      - Block Identifiers
      parameters:
      - "$ref": "#/components/parameters/v2-protocol-block-identifiers"
      - "$ref": "#/components/parameters/network"
      - "$ref": "#/components/parameters/continuation"
      - "$ref": "#/components/parameters/order"
      - "$ref": "#/components/parameters/limit"
      responses:
        '200':
          description: Block headers
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/block_identifiers"
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v2/{protocol}/{network}/block_identifier/{key}":
    get:
      summary: Block Identifier By Number/Hash
      description: Get minimal block identifier by block number or hash
      operationId: V2GetBlockIdentifier
      tags:
      - Block Identifiers
      parameters:
      - "$ref": "#/components/parameters/protocol-v2"
      - "$ref": "#/components/parameters/network"
      - "$ref": "#/components/parameters/key"
      responses:
        '200':
          description: Block
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/block_identifier"
        '400':
          description: Invalid Block Number
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: bad-request
                code: 16386
                title: Invalid Block Number
                status: 400
                detail: The requested block number is not a valid number
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: not-found
                code: 16388
                title: Not Found
                status: 404
                detail: The requested resource has not been found
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v2/{protocol}/{network}/tx/{id}":
    get:
      summary: Transaction By Hash
      operationId: V2GetTx
      tags:
      - Transactions
      parameters:
      - "$ref": "#/components/parameters/v2-protocol-txs"
      - "$ref": "#/components/parameters/network"
      - name: id
        in: path
        required: true
        description: Transaction ID/Hash
        schema:
          type: string
        example: '0xF00Fa860473130C1df10707223E66Cb4B839B165'
      responses:
        '200':
          description: Transaction
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/tx"
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: bad-request
                code: 16385
                title: Invalid Identifier
                status: 400
                detail: The requested identifier is invalid.
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: not-found
                code: 16388
                title: Not Found
                status: 404
                detail: The requested resource has not been found
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v2/{protocol}/{network}/sync/block_number":
    get:
      summary: Get current block number
      operationId: V2CurrentBlockNumber
      tags:
      - Sync
      parameters:
      - "$ref": "#/components/parameters/protocol-v2"
      - "$ref": "#/components/parameters/network"
      responses:
        '200':
          description: Current block number
          content:
            application/json:
              schema:
                format: int64
                type: integer
              example: 32656659
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v2/{protocol}/{network}/sync/block_id":
    get:
      summary: Get current block ID
      operationId: V2CurrentBlockID
      tags:
      - Sync
      parameters:
      - "$ref": "#/components/parameters/protocol-v2"
      - "$ref": "#/components/parameters/network"
      responses:
        '200':
          description: Current block ID
          content:
            application/json:
              schema:
                type: string
              example: 3ea7cfb439e0baa4d91525b66b1f7b4e79ac0302a054a83d12f4e2ee7c933c8f
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v2/{protocol}/{network}/tx/send":
    post:
      summary: Submit a signed transaction
      description: |
        Submit a signed transaction to the network.

        **Note**: A successful transaction may still be rejected on chain or not processed due to a too low fee.
        You can monitor successful transactions through Ubiquity websockets.
      operationId: TxSend
      tags:
      - Transactions
      parameters:
      - "$ref": "#/components/parameters/protocol"
      - "$ref": "#/components/parameters/network"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/signed_tx"
      responses:
        '200':
          description: A submitted Transaction ID
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/tx_receipt"
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: bad-request
                code: 16396
                title: Bad Request
                status: 400
                detail: 'failed to send transaction: json-rpc error #-27: Transaction
                  already in block chain'
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '429':
          "$ref": "#/components/responses/TooManyRequests"
  "/v2/{protocol}/{network}/tx/estimate_fee":
    get:
      summary: Get fee estimate
      description: |
        Get a fee estimation in decimals from the network.
        If supported by the protocol, the number of blocks used to make
        the estimation can be customized by the confirmed_within_blocks query parameter.
      operationId: EstimateFee
      tags:
      - Transactions
      parameters:
      - "$ref": "#/components/parameters/v2-protocol-block-identifiers"
      - "$ref": "#/components/parameters/network"
      - "$ref": "#/components/parameters/confirmed_within_blocks"
      responses:
        '200':
          description: A fee estimation from bitcoin (satoshis)
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                "$ref": "#/components/schemas/error"
              example:
                type: bad-request
                code: 16396
                title: Bad Request
                status: 400
                detail: 'failed to get estimated fee: json-rpc error #-8:  : Invalid
                  conf_target, must be between 1 and 1008'
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '429':
          "$ref": "#/components/responses/TooManyRequests"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: Opaque
      description: |
        `Authorization: Bearer <Token>` header must be set to authenticate API requests.
        You can create tokens in the "Configure" tab of your API access area.
  responses:
    TooManyRequests:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/error"
          example:
            type: too-many-requests
            title: Too Many Requests
            status: 429
            detail: Request rate limits have been exceeded. Try again after a few
              seconds.
    UnauthorizedError:
      description: Invalid or expired token
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/error"
          example:
            type: unauthorized
            title: Invalid Token
            status: 401
  schemas:
    amount:
      type: string
      description: Integer string in smallest unit (Satoshis)
      example: '133337'
    block:
      type: object
      properties:
        number:
          type: integer
          format: int64
          description: Block number
          example: 8000000
        id:
          type: string
          description: Block hash
          example: '0x123456070D674D44a7F9cb4Ab272bd88fAd004b5'
        parent_id:
          type: string
          description: Parent block hash
          example: '0xfcf029ffd36a6714aae09dcc7acbdd8f2b96327f'
        date:
          type: integer
          format: int64
          description: Unix timestamp
          example: 1571222657
        tx_ids:
          type: array
          description: Complete list of transaction IDs
          items:
            type: string
            example: '0xF00Fa860473130C1df10707223E66Cb4B839B165'
        txs:
          type: array
          description: Partial list of normalized transactions (not filtered or unknown
            model)
          items:
            "$ref": "#/components/schemas/tx"
        supply:
          type: object
          description: Coin supplies with asset paths as keys
          additionalProperties:
            "$ref": "#/components/schemas/supply"
    tx_outputs:
      type: object
      description: List of transaction outputs
      properties:
        total:
          type: integer
          description: Number of items in block identifiers
          example: 25
        continuation:
          type: object
          description: Token to get the next page
          properties:
            meta:
              nullable: true
              "$ref": "#/components/schemas/Meta"
        data:
          type: array
          items:
            type: object
            properties:
              status:
                type: string
                description: the status of the given transaction output
                example: mined
              is_spent:
                type: boolean
                description: whether the transaction output was spent or not
                example: false
              spent:
                nullable: false
                "$ref": "#/components/schemas/tx-output-response"
              value:
                type: integer
                format: int64
                description: the amount of tokens within the given output
                example: 600
              mined:
                nullable: true
                "$ref": "#/components/schemas/tx-output-response"
    tx-output-response:
      type: object
      properties:
        index:
          type: integer
          description: the output index within a given transaction
          example: 1
        tx_id:
          type: string
          description: the transaction identifier
          example: 57f7dc46786c5d56d260186d459f1246943dd6e83ca00235909dad1b826f20b4
        date:
          type: integer
          description: the transaction creation unix timestamp
          example: 1655419925
        block_id:
          type: string
          description: the identifier of the block which the transaction was mined
          example: '00000000000000000008ad1bdca4288143a0cb20e71de0808a066db89857e153'
        block_number:
          type: integer
          description: the number of the block which the transaction was mined
          example: 741100
        confirmations:
          type: integer
          description: the number of confirmations the transaction took in order to
            be mined
          example: 1619
    block_identifier:
      type: object
      properties:
        number:
          type: integer
          format: int64
          description: Block number
          example: 8000000
        id:
          type: string
          description: Block hash
          example: '0x123456070D674D44a7F9cb4Ab272bd88fAd004b5'
        parent_id:
          type: string
          description: Parent block hash
          example: '0xfcf029ffd36a6714aae09dcc7acbdd8f2b96327f'
    block_identifiers:
      type: object
      properties:
        total:
          type: integer
          description: Number of items in block identifiers
          example: 25
        items:
          type: array
          items:
            "$ref": "#/components/schemas/block_identifier"
          example:
            total: 2
            data:
            - number: 1
              id: 80ca095ed10b02e53d769eb6eaf92cd04e9e0759e5be4a8477b42911ba49c78f
              parent_id: 12a765e31ffd4059bada1e25190f6e98c99d9714d334efa41a195a7e7e04bfe2
              date: 1318055359
              num_txs: 1
            - number: 2
              id: 13957807cdd1d02f993909fa59510e318763f99a506c4c426e3b254af09f40d7
              parent_id: 80ca095ed10b02e53d769eb6eaf92cd04e9e0759e5be4a8477b42911ba49c78f
              date: 1318386858
              num_txs: 1
            meta:
              paging:
                next_page_token: Mg===
        continuation:
          type: object
          description: Token to get the next page
          properties:
            meta:
              nullable: true
              "$ref": "#/components/schemas/Meta"
    tx_confirmation:
      type: object
      properties:
        current_height:
          type: integer
          format: int64
          description: Current Block Number
          example: 150123
        tx_id:
          type: string
          description: Transaction hash
          example: '0x123456070D674D44a7F9cb4Ab272bd88fAd004b5'
        confirmations:
          type: integer
          format: int64
          description: Total transaction confirmations
          example: 10
    tx_page:
      type: object
      properties:
        total:
          type: integer
          description: Number of items in txs
          example: 1
        items:
          type: array
          items:
            "$ref": "#/components/schemas/tx"
        continuation:
          type: object
          description: Token to get the next page
          properties:
            meta:
              nullable: true
              "$ref": "#/components/schemas/Meta"
    tx_page-v1:
      type: object
      properties:
        total:
          type: integer
          description: Number of items in txs
          example: 1
        items:
          type: array
          items:
            "$ref": "#/components/schemas/tx-v1"
        continuation:
          type: object
          description: Token to get the next page
          properties:
            meta:
              nullable: true
              "$ref": "#/components/schemas/Meta"
    accounts_balances_map:
      type: object
      description: Accounts balances with account addressses as keys
      additionalProperties:
        additionalProperties:
          type: object
          properties:
            currency:
              "$ref": "#/components/schemas/currency"
            balance:
              "$ref": "#/components/schemas/amount"
    accounts_balances_map-v1:
      type: object
      description: Accounts balances with account addressses as keys
      additionalProperties:
        "$ref": "#/components/schemas/balances_map-v1"
    balances_map:
      type: object
      description: Currency balances with asset paths as keys
      additionalProperties:
        type: object
        properties:
          currency:
            "$ref": "#/components/schemas/currency"
          balance:
            "$ref": "#/components/schemas/amount"
      example:
        bitcoin/native/btc:
          currency:
            asset_path: bitcoin/native/btc
            symbol: BTC
            name: Bitcoin
            decimals: 18
            type: native
          balance: '99999'
    balances_map-v1:
      description: Currency balances with asset paths as keys
      type: array
      items:
        "$ref": "#/components/schemas/balance-v1"
      example:
      - currency:
          asset_path: ethereum/native/eth
          symbol: ETH
          name: Ether
          decimals: 18
          type: native
        confirmed_balance: '99999'
        pending_balance: '999999'
        confirmed_nonce: 9999
        confirmed_block: 99999999
    balance-v1:
      description: Currency balances with asset paths as keys
      type: object
      properties:
        currency:
          "$ref": "#/components/schemas/currency"
        confirmed_balance:
          type: string
        pending_balance:
          type: string
        confirmed_nonce:
          type: integer
        confirmed_block:
          type: integer
      example:
        currency:
          asset_path: ethereum/native/eth
          symbol: ETH
          name: Ether
          decimals: 18
          type: native
        confirmed_balance: '99999'
        pending_balance: '999999'
        confirmed_nonce: 9999
        confirmed_block: 99999999
    tx:
      type: object
      properties:
        id:
          type: string
          description: Unique transaction identifier
          example: '0xF00Fa860473130C1df10707223E66Cb4B839B165'
        slip44:
          type: integer
          description: SLIP-44 coin ID
          example: 60
        addresses:
          type: array
          description: List of involved addresses (excluding contracts)
          uniqueItems: true
          items:
            type: string
            example: '0x123456070D674D44a7F9cb4Ab272bd88fAd004b5'
          nullable: true
        assets:
          type: array
          description: List of moved assets by asset path
          uniqueItems: true
          items:
            type: string
            example: ethereum/native/eth
          nullable: true
        date:
          type: integer
          format: int64
          description: Unix timestamp
          example: 1571222657
        height:
          type: integer
          format: int64
          description: Number of block if mined, otherwise omitted.
          example: 198258
          nullable: true
        block_id:
          type: string
          description: ID of block if mined, otherwise omitted.
          example: '0xaf2948aba2ed8cc7d5b7d4e4f4164a7c8819efc94d30aab3fce6904df68dbc07'
          nullable: true
        status:
          type: string
          description: Result status of the transaction.
          enum:
          - completed
          - failed
        tags:
          type: array
          description: List of tags for this transaction
          uniqueItems: true
          items:
            type: string
            example: coinbase
          nullable: true
        operations:
          type: object
          description: Operations in this transaction (opaque keys).
          additionalProperties:
            "$ref": "#/components/schemas/operation"
        effects:
          type: object
          description: Effects by address, if supported
          additionalProperties:
            "$ref": "#/components/schemas/effect"
          example:
            3AQCdZ9MxkMoRG4SMRtkbK6fEtgRPGzSDy:
              balance_changes:
                bitcoin/native/btc:
                  old: '500'
                  delta: "-300"
                  new: '200'
    tx_minify:
      type: object
      nullable: true
      description: Transaction
      properties:
        id:
          type: string
          description: Unique transaction identifier
          example: '0xF00Fa860473130C1df10707223E66Cb4B839B165'
        date:
          type: integer
          format: int64
          description: Unix timestamp
          example: 1571222657
        block_id:
          type: string
          description: ID of block.
          example: '0xaf2948aba2ed8cc7d5b7d4e4f4164a7c8819efc94d30aab3fce6904df68dbc07'
          nullable: true
        block_number:
          type: integer
          format: int64
          description: Height of block,
          example: 77477
          nullable: true
        confirmations:
          type: integer
          format: int64
          description: Total transaction confirmations
          example: 10
    tx_output:
      type: object
      properties:
        status:
          type: string
          description: Result status of the transaction output.
          enum:
          - mined
          - unknown
        is_spent:
          type: boolean
          description: If the transaction output was spent or not, if the value is
            true the `spent` transaction object will be presented
          example: true
        value:
          type: integer
          format: int64
          description: Amount of transaction output
          nullable: true
        mined:
          "$ref": "#/components/schemas/tx_minify"
        spent:
          "$ref": "#/components/schemas/tx_minify"
    Event:
      type: object
      properties:
        amount:
          type: integer
          nullable: true
        block_id:
          type: string
        block_number:
          type: integer
        date:
          type: integer
        decimals:
          type: integer
          nullable: true
        denomination:
          type: string
          nullable: true
        destination:
          type: string
          nullable: true
        id:
          type: string
        meta: {}
        source:
          type: string
          nullable: true
        transaction_id:
          type: string
        type:
          type: string
    tx-v1:
      type: object
      properties:
        id:
          type: string
          description: Unique transaction identifier
          example: '0xF00Fa860473130C1df10707223E66Cb4B839B165'
        date:
          type: integer
          format: int64
          description: Unix timestamp
          example: 1571222657
        block_id:
          type: string
          description: ID of block if mined, otherwise omitted.
          example: '0xaf2948aba2ed8cc7d5b7d4e4f4164a7c8819efc94d30aab3fce6904df68dbc07'
          nullable: true
        status:
          type: string
          description: Result status of the transaction.
          enum:
          - completed
          - failed
        nonce:
          type: integer
        num_events:
          type: integer
        meta: {}
        events:
          type: array
          items:
            "$ref": "#/components/schemas/Event"
          nullable: true
    operation:
      type: object
      oneOf:
      - "$ref": "#/components/schemas/transfer_operation"
      - "$ref": "#/components/schemas/multi_transfer_operation"
      discriminator:
        propertyName: type
        mapping:
          transfer: "#/components/schemas/transfer_operation"
          multi_transfer: "#/components/schemas/multi_transfer_operation"
    transfer_operation:
      type: object
      properties:
        type:
          type: string
          default: transfer
        event:
          type: string
        detail:
          "$ref": "#/components/schemas/transfer"
      required:
      - type
      - detail
    multi_transfer_operation:
      type: object
      properties:
        type:
          type: string
          default: multi_transfer
        event:
          type: string
        detail:
          "$ref": "#/components/schemas/multi_transfer"
      required:
      - type
      - detail
    effect:
      type: object
      description: Effects are the state changes on an account
      properties:
        balance_changes:
          type: object
          description: Balance changes by asset
          additionalProperties:
            "$ref": "#/components/schemas/balance_change"
      example:
        balance_changes:
          bitcoin/native/btc:
            old: '500'
            delta: "-300"
            new: '200'
    balance_change:
      type: object
      description: Change of balance of a currency
      properties:
        old:
          type: string
          description: Balance before transaction
          example: '500'
        delta:
          type: string
          description: Balance difference
          example: "-300"
        new:
          type: string
          description: Balance after transaction
          example: '200'
        currency:
          "$ref": "#/components/schemas/currency"
    accounts_obj:
      type: object
      properties:
        addresses:
          type: array
          items:
            type: string
    transfer:
      type: object
      description: Transfer of currency from one account to another
      properties:
        from:
          type: string
          description: Sender address
        to:
          type: string
          description: Receiver address
        currency:
          "$ref": "#/components/schemas/currency"
        value:
          "$ref": "#/components/schemas/amount"
        fee:
          "$ref": "#/components/schemas/fee"
      required:
      - from
      - to
      - currency
      - value
    multi_transfer:
      type: object
      description: Transfer of currency in the UTXO model
      properties:
        inputs:
          type: array
          items:
            "$ref": "#/components/schemas/utxo"
        outputs:
          type: array
          items:
            "$ref": "#/components/schemas/utxo"
        currency:
          "$ref": "#/components/schemas/currency"
        total_in:
          "$ref": "#/components/schemas/amount"
        total_out:
          "$ref": "#/components/schemas/amount"
        unspent:
          "$ref": "#/components/schemas/amount"
      required:
      - inputs
      - outputs
      - currency
      - total_in
      - total_out
      - unspent
    currency:
      type: object
      oneOf:
      - "$ref": "#/components/schemas/native_currency"
      - "$ref": "#/components/schemas/token_currency"
      - "$ref": "#/components/schemas/smart_token_currency"
      discriminator:
        propertyName: type
        mapping:
          native: "#/components/schemas/native_currency"
          token: "#/components/schemas/token_currency"
          smart_token: "#/components/schemas/smart_token_currency"
    native_currency:
      type: object
      properties:
        asset_path:
          type: string
          description: Asset path of transferred currency
          example: ethereum/native/eth
        symbol:
          type: string
          description: Currency symbol
          example: ETH
        name:
          type: string
          description: Name of currency
          example: Ether
        decimals:
          type: integer
          description: Decimal places right to the comma
          example: 18
        type:
          type: string
          default: native
      required:
      - asset_path
      - type
    token_currency:
      type: object
      properties:
        asset_path:
          type: string
          description: Asset path of transferred currency
          example: ethereum/native/eth
        symbol:
          type: string
          description: Currency symbol
          example: ETH
        name:
          type: string
          description: Name of currency
          example: Ether
        decimals:
          type: integer
          description: Decimal places right to the comma
          example: 18
        type:
          type: string
          default: token
        detail:
          "$ref": "#/components/schemas/token"
      required:
      - asset_path
      - type
    smart_token_currency:
      type: object
      properties:
        asset_path:
          type: string
          description: Asset path of transferred currency
          example: ethereum/native/eth
        symbol:
          type: string
          description: Currency symbol
          example: ETH
        name:
          type: string
          description: Name of currency
          example: Ether
        decimals:
          type: integer
          description: Decimal places right to the comma
          example: 18
        type:
          type: string
          default: smart_token
        detail:
          "$ref": "#/components/schemas/smart_token"
      required:
      - asset_path
      - type
    token:
      type: object
      properties:
        type:
          type: string
          description: Name of token mechanism
          example: credit_alphanum4
        id:
          type: string
          description: Token identifier
          example: USD
        creator:
          type: string
          description: Address that created token
          example: GDUKMGUGDZQK6YHYA5Z6AY2G4XDSZPSZ3SW5UN3ARVMO6QSRDWP5YLEX
      required:
      - type
      - id
    smart_token:
      type: object
      properties:
        type:
          type: string
          description: Name of token mechanism (smart contract)
          example: ERC-20
        contract:
          type: string
          description: Address of contract
          example: '0xF00Fa860473130C1df10707223E66Cb4B839B165'
      required:
      - type
      - contract
    fee:
      type: object
      properties:
        amount:
          "$ref": "#/components/schemas/amount"
        destination:
          type: string
          description: Destination
          example: E.g. address
      required:
      - amount
      - destination
    utxo:
      type: object
      description: An unspent transaction output
      properties:
        asset_path:
          type: string
          description: Asset path of transferred currency
          example: bitcoin/native/btc
        address:
          type: string
          example: bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf5mdq
        value:
          "$ref": "#/components/schemas/amount"
    protocol_detail:
      type: object
      properties:
        source:
          type: string
          description: Backend API Type
          example: BlockScout RPC
        handle:
          type: string
          example: bitcoin
        genesis_number:
          type: integer
          format: int64
        endpoints:
          type: array
          items:
            type: string
    protocol_endpoint:
      type: object
      properties:
        path:
          type: string
          example: "/ethereum/tx/:id"
        example:
          type: string
          example: "/ethereum/tx/0x12389528398"
    protocols_overview:
      type: object
      properties:
        protocols:
          type: array
          description: List of items each describing a pair of supported protocol
            and network.
          items:
            type: object
            properties:
              handle:
                type: string
                example: bitcoin
              network:
                type: string
                example: mainnet
    fee_estimate:
      type: object
      properties:
        most_recent_block:
          type: integer
          description: Most recent block
        estimated_fees:
          type: object
          description: Object containing fast, medium, slow fees
          properties:
            fast: {}
            medium: {}
            slow: {}
    supply:
      type: object
      properties:
        maximum:
          type: string
          description: Maximum supply
          example: '100000000000000000'
        total:
          type: string
          description: Total supply at block height, excluding burnt coins
          example: '99993100633247616'
        total_created:
          type: string
          description: Total coins created historically up until this block
          example: '100000000000000000'
        total_burnt:
          type: string
          description: Total coins burnt historically up until this block
          example: '6899366752384'
        created:
          type: string
          description: Coins created at this block
          example: '0'
    tx_destination:
      type: object
      description: A list of recipients
      properties:
        destination:
          type: string
          example: mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt
        amount:
          description: The amount you wish to transfer
          type: string
          example: '0.0001'
      required:
      - destination
      - amount
    signed_tx:
      type: object
      properties:
        tx:
          type: string
          description: The signed TX
          example: 0100000001ca19af5fb94ced7e62b623d0039a398a42e60050405a1341efe475894629c131010000008b483045022100d77b002b3142013b3f825a730f5bc3ead2014266f07ba4449269af0cf6f086310220365bca1d616ba86fac42ad69efd5f92c5ed6cf16f27ebf5ab55010efc72c219d014104417eb0abe69db2eca63c84eb44266c29c24973dc81cde16ca86c9d923630cb5f797bae7d7fab13498e06146111356eb271da74add05ebda8f72ff2b2878fddb7ffffffff0410270000000000001976a914344a0f48ca150ec2b903817660b9b68b13a6702688ac204e0000000000001976a914344a0f48ca150ec2b903817660b9b68b13a6702688ac30750000000000001976a914344a0f48ca150ec2b903817660b9b68b13a6702688ac48710000000000001976a914d6fa8814924b480fa7ff903b5ef61100ab4d92fe88ac00000000
      required:
      - tx
    tx_receipt:
      type: object
      properties:
        id:
          type: string
          description: The transaction ID
          example: 9c8ac345b443dd10a418ea0beaa320ef233dbae5590be2a11ac090e0e9839c1c
      required:
      - id
    error:
      type: object
      properties:
        type:
          type: string
          description: HTTP error type
          example: bad-request
        code:
          type: integer
          description: Numeric error code
          example: 16384
        title:
          type: string
          description: Short error description
          example: Invalid Address
        status:
          type: integer
          description: HTTP status of the error
          example: 400
        detail:
          type: string
          description: Long error description
          example: The requested address is invalid on this protocol
    report:
      type: object
      properties:
        fields:
          type: array
          description: Transaction items
          items:
            "$ref": "#/components/schemas/report_field"
        items:
          type: integer
          description: The number of transactions in the report
          example: 1
        limit:
          type: integer
          description: The limit number provided in the request or the default
          example: 100
        continuation:
          "$ref": "#/components/schemas/Meta"
      required:
      - fields
      - items
    report_field:
      type: object
      properties:
        protocol:
          type: string
          description: The protocol the address relates to
          example: Algorand
        address:
          type: string
          description: The wallet/account the transaction occurred
          example: GXL2EQ6JV54MTMP2IXOTF5CJLS7GAWMRDZMOY7JZAPO72AQRDDYGD6OX3E
        currency:
          type: string
          description: The currency symbol
          example: ALGO
        event_id:
          type: string
          description: The ID of the event within a transaction
          example: RNEYUT3MRYGT5ENSLIC7LGJCJMW6BXNS6SAW7A25DTYRW4TFJ5JA
        block:
          type: integer
          format: int64
          description: The block number the transaction occurred on
          example: 8986217
        timestamp:
          type: integer
          format: int32
          description: The unix timestamp when the transaction was added to a block
          example: 1599745403
        hash:
          type: string
          description: The transaction ID
          example: RNEYUT3MRYGT5ENSLIC7LGJCJMW6BXNS6SAW7A25DTYRW4TFJ5JA
        action:
          type: string
          description: The action type e.g. Transfer, Deposit, Staking Reward etc..
          example: pay
        value:
          type: string
          description: The amount of currency involved in the transaction (smallest
            unit)
          example: '1000000'
        sender_address:
          type: string
          description: The address where the funds originated
          example: T3BYUTYZCWV7UVK7IFYPC2UKH5VNBGVP4PUKSUBF5F6GQ244Y4I2XUWCQM
        fee:
          type: string
          description: How much was charged as a fee for processing the transaction
          example: '1000'
        decimals:
          type: integer
          format: int32
          description: The number of decimals in one coin, used to convert smallest
            unit to 1 whole coin if needed
          example: 6
        meta:
          "$ref": "#/components/schemas/report_field_meta"
      required:
      - action
      - address
      - block
      - currency
      - decimals
      - event_id
      - fee
      - hash
      - protocol
      - sender_address
      - timestamp
      - value
    report_field_meta:
      description: Additional metadata bespoke to specific protocols
      nullable: true
      oneOf:
      - "$ref": "#/components/schemas/algorand_meta"
      discriminator:
        propertyName: type
        mapping:
          algorand_meta: "#/components/schemas/algorand_meta"
    algorand_meta:
      type: object
      properties:
        type:
          type: string
          default: algorand_meta
        sender_reward:
          type: string
          example: '121176'
        recipient_reward:
          type: string
          example: '0'
        close:
          type: string
          example: XIU7HGGAJ3QOTATPDSIIHPFVKMICXKHMOR2FJKHTVLII4FAOA3CYZQDLG4
        close_amount:
          type: string
          example: '0'
        close_reward:
          type: string
          example: '0'
    Collection:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        logo:
          type: string
        contracts:
          type: array
          items:
            type: string
        verified:
          type: boolean
    Contract:
      type: object
      properties:
        address:
          type: string
        name:
          type: string
        symbol:
          type: string
        description:
          type: string
        image_url:
          type: string
        type:
          type: string
    GetAssetResponse:
      type: object
      properties:
        asset:
          "$ref": "#/components/schemas/GetAssetResponse_Asset"
    GetAssetResponse_Asset:
      type: object
      properties:
        token_id:
          type: string
        token_type:
          type: string
        media:
          "$ref": "#/components/schemas/GetAssetResponse_AssetMedia"
        name:
          type: string
        mint_date:
          type: integer
          format: int64
        token_uri:
          type: string
        description:
          type: string
        contract_address:
          type: string
        wallets:
          type: array
          items:
            "$ref": "#/components/schemas/GetAssetResponse_AssetWallet"
        attributes:
          type: array
          items:
            "$ref": "#/components/schemas/GetAssetResponse_AssetTrait"
    GetAssetResponse_AssetMedia:
      type: object
      properties:
        image_url:
          type: string
    GetAssetResponse_AssetTrait:
      type: object
      properties:
        trait_type:
          type: string
        value:
          type: string
    GetAssetResponse_AssetWallet:
      type: object
      properties:
        address:
          type: string
    GetCollectionResponse:
      type: object
      properties:
        collection:
          "$ref": "#/components/schemas/GetCollectionResponse_Collection"
    GetCollectionResponse_Collection:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        logo:
          type: string
        banner:
          type: string
        verified:
          type: boolean
        contracts:
          type: array
          items:
            "$ref": "#/components/schemas/Contract"
        meta:
          type: object
    GetEvent:
      type: object
      properties:
        id:
          type: string
        contract_address:
          type: string
        token_id:
          type: string
        event_type:
          type: string
        timestamp:
          type: integer
          format: int64
        from:
          type: string
        to:
          type: string
        quantity:
          type: integer
          format: int64
        transaction:
          type: object
        payments:
          type: array
          items:
            "$ref": "#/components/schemas/Payment"
    GetEventResponse:
      type: object
      properties:
        data:
          "$ref": "#/components/schemas/GetEvent"
    NFTEvent:
      type: object
      properties:
        id:
          type: string
        contract_address:
          type: string
        token_id:
          type: string
        event_type:
          type: string
        timestamp:
          type: integer
          format: int64
        from_account:
          type: string
        to_account:
          type: string
        quantity:
          type: integer
          format: int64
    ListAssetsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            "$ref": "#/components/schemas/ListAssetsResponse_Asset"
        meta:
          "$ref": "#/components/schemas/Meta"
    ListAssetsResponse_Asset:
      type: object
      properties:
        id:
          type: string
        token_id:
          type: string
        image_url:
          type: string
        name:
          type: string
        contract_address:
          type: string
        wallets:
          type: array
          items:
            type: string
    ListCollectionResponse:
      type: object
      properties:
        data:
          type: array
          items:
            "$ref": "#/components/schemas/Collection"
        meta:
          "$ref": "#/components/schemas/Meta"
    ListEventResponse:
      type: object
      properties:
        data:
          type: array
          items:
            "$ref": "#/components/schemas/NFTEvent"
        meta:
          "$ref": "#/components/schemas/Meta"
    Meta:
      type: object
      properties:
        paging:
          "$ref": "#/components/schemas/Paging"
    Paging:
      type: object
      properties:
        next_page_token:
          type: string
          example: 15ff2379d9983108a452538ae20020858149aec40c8c55c2b5cf6d8a5666f46e-3
    Payment:
      type: object
      properties:
        from:
          type: string
        to:
          type: string
        price:
          type: number
          format: double
        currency:
          type: string
    SearchCollectionResponse:
      type: object
      properties:
        data:
          type: array
          items:
            "$ref": "#/components/schemas/Collection"
  parameters:
    protocol:
      in: path
      name: protocol
      required: true
      description: Protocol handle
      schema:
        type: string
      examples:
        Algorand:
          value: algorand
        Bitcoin:
          value: bitcoin
        Bitcoincash:
          value: bitcoincash
        Dogecoin:
          value: dogecoin
        Ethereum:
          value: ethereum
        Litecoin:
          value: litecoin
        Near:
          value: near
        Oasis:
          value: oasis
        Polkadot:
          value: polkadot
        Ripple:
          value: xrp
        Solana:
          value: solana
        Terra:
          value: terra
        Tezos:
          value: tezos
    protocol-v1:
      in: path
      name: protocol
      required: true
      description: Protocol handle
      schema:
        type: string
      examples:
        Algorand:
          value: algorand
        Bitcoin:
          value: bitcoin
        Bitcoincash:
          value: bitcoincash
        Dogecoin:
          value: dogecoin
        Ethereum:
          value: ethereum
        Litecoin:
          value: litecoin
        Near:
          value: near
        Oasis:
          value: oasis
        Polkadot:
          value: polkadot
        Ripple:
          value: xrp
        Solana:
          value: solana
        Stellar:
          value: stellar
        Terra:
          value: terra
        Tezos:
          value: tezos
    protocol-v2:
      in: path
      name: protocol
      required: true
      description: Protocol handle
      schema:
        type: string
      examples:
        Algorand:
          value: algorand
        Bitcoin:
          value: bitcoin
        Diem:
          value: diem
        Dogecoin:
          value: dogecoin
        Ethereum:
          value: ethereum
        Near:
          value: near
        Oasis:
          value: oasis
        Polkadot:
          value: polkadot
        Ripple:
          value: xrp
        Stellar:
          value: stellar
    protocol-estimate-fee:
      in: path
      name: protocol
      required: true
      description: Protocol handle
      schema:
        type: string
      examples:
        Bitcoin:
          value: bitcoin
        Bitcoin Cash:
          value: bitcoincash
        Ethereum:
          value: ethereum
        Litecoin:
          value: litecoin
    tx-send-v1:
      in: path
      name: protocol
      required: true
      description: Protocol handle
      schema:
        type: string
      examples:
        Algorand:
          value: algorand
        Bitcoin:
          value: bitcoin
        Bitcoincash:
          value: bitcoincash
        Dogecoin:
          value: dogecoin
        Ethereum:
          value: ethereum
        Litecoin:
          value: litecoin
        Polkadot:
          value: polkadot
    protocol-utxo:
      in: path
      name: protocol
      required: true
      description: Protocol handle
      schema:
        type: string
      examples:
        Bitcoin:
          value: bitcoin
        Bitcoincash:
          value: bitcoincash
        Dogecoin:
          value: dogecoin
        Litecoin:
          value: litecoin
    protocol-block-headers:
      in: path
      name: protocol
      required: true
      description: Protocol handle
      schema:
        type: string
      examples:
        Bitcoin:
          value: bitcoin
        Bitcoin Cash:
          value: bitcoincash
        Dogecoin:
          value: dogecoin
        Ethereum:
          value: ethereum
        Litecoin:
          value: litecoin
        Polkadot:
          value: polkadot
        Tezos:
          value: tezos
    protocol-tx-id:
      in: path
      name: protocol
      required: true
      description: Protocol handle
      schema:
        type: string
      examples:
        Algorand:
          value: algorand
        Bitcoin:
          value: bitcoin
        Bitcoincash:
          value: bitcoincash
        Dogecoin:
          value: dogecoin
        Ethereum:
          value: ethereum
        Litecoin:
          value: litecoin
        Polkadot:
          value: polkadot
        Ripple:
          value: xrp
        Solana:
          value: solana
        Stellar:
          value: stellar
        Terra:
          value: terra
        Tezos:
          value: tezos
    protocol-block-identifier-id:
      in: path
      name: protocol
      required: true
      description: Protocol handle
      schema:
        type: string
      examples:
        Bitcoin:
          value: bitcoin
        Bitcoincash:
          value: bitcoincash
        Dogecoin:
          value: dogecoin
        Ethereum:
          value: ethereum
        Litecoin:
          value: litecoin
        Near:
          value: near
        Polkadot:
          value: polkadot
        Ripple:
          value: xrp
        Tezos:
          value: tezos
    protocol-report:
      in: path
      name: protocol
      required: true
      description: Protocol handle
      schema:
        type: string
      examples:
        Algorand:
          value: algorand
        Polkadot:
          value: polkadot
        Tezos:
          value: tezos
    protocol-report-v2:
      in: path
      name: protocol
      required: true
      description: Protocol handle
      schema:
        type: string
      examples:
        Algorand:
          value: algorand
        Diem:
          value: diem
        Polkadot:
          value: polkadot
        Stellar:
          value: stellar
    protocol-tx-confirmation:
      in: path
      name: protocol
      required: true
      description: Protocol handle
      schema:
        type: string
      examples:
        Bitcoin:
          value: bitcoin
        Bitcoincash:
          value: bitcoincash
        Dogecoin:
          value: dogecoin
        Ethereum:
          value: ethereum
        Litecoin:
          value: litecoin
        Polkadot:
          value: polkadot
        Terra:
          value: terra
        Tezos:
          value: tezos
    protocol-account-address:
      in: path
      name: protocol
      required: true
      description: Protocol handle
      schema:
        type: string
      examples:
        Algorand:
          value: algorand
        Bitcoin:
          value: bitcoin
        Bitcoincash:
          value: bitcoincash
        Dogecoin:
          value: dogecoin
        Ethereum:
          value: ethereum
        Near:
          value: near
        Litecoin:
          value: litecoin
        Oasis:
          value: oasis
        Polkadot:
          value: polkadot
        Ripple:
          value: xrp
        Solana:
          value: solana
        Stellar:
          value: stellar
        Terra:
          value: terra
        Tezos:
          value: tezos
    protocol-account-txs:
      in: path
      name: protocol
      required: true
      description: Protocol handle
      schema:
        type: string
      examples:
        Algorand:
          value: algorand
        Bitcoin:
          value: bitcoin
        Bitcoincash:
          value: bitcoincash
        Dogecoin:
          value: dogecoin
        Ethereum:
          value: ethereum
        Litecoin:
          value: litecoin
        Polkadot:
          value: polkadot
        Ripple:
          value: xrp
        Solana:
          value: solana
        Stellar:
          value: stellar
        Tezos:
          value: tezos
    v2-protocol-accounts:
      in: path
      name: protocol
      required: true
      description: Protocol handle
      schema:
        type: string
      examples:
        Algorand:
          value: algorand
        Bitcoin:
          value: bitcoin
        Diem:
          value: diem
        Ethereum:
          value: ethereum
        Near:
          value: near
        Oasis:
          value: oasis
        Polkadot:
          value: polkadot
        Ripple:
          value: xrp
        Stellar:
          value: stellar
    v2-protocol-block-identifiers:
      in: path
      name: protocol
      required: true
      description: Protocol handle
      schema:
        type: string
      examples:
        Bitcoin:
          value: bitcoin
        Ethereum:
          value: ethereum
    v2-protocol-txs:
      in: path
      name: protocol
      required: true
      description: Protocol handle
      schema:
        type: string
      examples:
        Bitcoin:
          value: bitcoin
        Diem:
          value: diem
        Ethereum:
          value: ethereum
        Polkadot:
          value: polkadot
        Stellar:
          value: stellar
        Ripple:
          value: xrp
    protocol-tx:
      in: path
      name: protocol
      required: true
      description: Protocol handle
      schema:
        type: string
      examples:
        Bitcoin:
          value: bitcoin
        Bitcoincash:
          value: bitcoincash
        Dogecoin:
          value: dogecoin
        Litecoin:
          value: litecoin
    protocol-txs:
      in: path
      name: protocol
      required: true
      description: Protocol handle
      schema:
        type: string
      examples:
        Algorand:
          value: algorand
        Bitcoin:
          value: bitcoin
        Bitcoincash:
          value: bitcoincash
        Litecoin:
          value: litecoin
        Polkadot:
          value: polkadot
        Tezos:
          value: tezos
        Ripple:
          value: xrp
        Stellar:
          value: stellar
    network:
      name: network
      in: path
      required: true
      description: Which network to target. Available networks can be found with /{protocol}
      schema:
        type: string
      examples:
        Mainnet:
          value: mainnet
        Testnet:
          value: testnet
    address:
      name: address
      in: path
      required: true
      description: Account address
      schema:
        type: string
      example: '0x2E31B312290A01538514806Fbb857736ea4d5555'
    tx-hash:
      name: id
      in: path
      required: true
      description: Transaction ID/Hash
      schema:
        type: string
      example: '0xF00Fa860473130C1df10707223E66Cb4B839B165'
    block_identifier:
      name: block_identifier
      in: path
      required: true
      description: Block ID or number
      schema:
        type: string
      example: '0xF00Fa860473130C1df10707223E66Cb4B839B165'
    order:
      name: order
      in: query
      description: Pagination order
      schema:
        type: string
        enum:
        - desc
        - asc
    continuation:
      name: continuation
      in: query
      required: false
      description: Continuation token from earlier response
      schema:
        type: string
      example: '8185.123'
    limit:
      name: limit
      in: query
      required: false
      description: |
        Max number of items to return in a response.
        Defaults to 25 and is capped at 100.
      schema:
        type: integer
      example: 25
    key:
      name: key
      in: path
      required: true
      description: Block number or block hash/ID or Special identifier
      schema:
        type: string
        description: Block number or block hash/ID or Special identifier
      examples:
        Block number:
          value: 8000000
          summary: Block number
        Block hash/ID:
          value: '0x4e454b49dc8a2e2a229e0ce911e9fd4d2aa647de4cf6e0df40cf71bff7283330'
          summary: Block hash or Block ID
        Special identifier:
          value: current
          summary: Special identifier for the current block
    number:
      name: number
      in: path
      required: true
      description: Block number
      schema:
        type: integer
        description: Block number
      examples:
        Block number:
          value: 8000000
          summary: Block number
    assets:
      name: assets
      in: query
      required: false
      description: Comma-separated list of asset paths to filter. If the list is empty,
        or all elements are empty, this filter has no effect.
      schema:
        type: string
      examples:
        ETH native currency:
          value: ethereum/native/eth
        ETH smart token:
          value: ethereum/contract/0x0f5d2fb29fb7d3cfee444a200298f468908cc942/erc-20
        More than one asset:
          value: ethereum/native/eth,ethereum/contract/0x0f5d2fb29fb7d3cfee444a200298f468908cc942/erc-20
    confirmed_within_blocks:
      name: confirmed_within_blocks
      in: query
      required: false
      description: |
        The number of blocks you would like the transaction to be processed within.
        Lower numbers produce higher fees.
      schema:
        type: integer
        default: 10
